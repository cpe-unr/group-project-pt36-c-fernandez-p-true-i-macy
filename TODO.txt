//////////////////////////////////////////////////////////
///////////   MUST DO. WORTH 25% OF GRADE!   /////////////
//////////////////////////////////////////////////////////
//  Presentation:                                       //
//  - all methods and classes documented with Doxygen   //                        
//  - description of design                             //
//  - describe any challenges                           //
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

   Implement Metadata Editing:
    - use mm.print() to display the wav's metadata
    - write function to write new metadata 
    - must overwrite existing data if IDs match 
    - when done, add function to driver

    Continue Building the User Interface:
    - implement each new feature as it is completed
    - when std::cin is used, make guards for invalid inputs
    - make sure everything looks good

    Test:
    - writing new metadata (check in Audacity)
    - overwriting existing metadata (check in Audacity)
    - valid and invalid input for all std::cin usages
    - .csv files after changing metadata
    - check for memory leaks: valgrind --leak-check=yes ./test audiofiles
